//names
val name = Val[String]
val nameProject = Val[String]
val nameTotal = Val[String]
val simulName = Val[String]
val inputName = Val[String]
val arraySimulFile = Val[Array[File]]
val arrayFolderIn = Val[Array[File]]
val arrayName = Val[Array[String]]

//files
val folderIn = Val[File]
val folderOut = Val[File]
val projectFile = Val[File]
val simulFile = Val[File]
val resultFile = Val[File]
val resultFolder = workDirectory / "results"

//project param
val xmin = Val[Double]
val ymin = Val[Double]
val width = Val[Double]
val height = Val[Double]
val xshift = Val[Double]
val yshift = Val[Double]

//decomp param
val seuilDensBuild=Val[Double]
val seuilRange: List[Double] = List(0.00001,0.0001,0.001,0.01)
val minSize = Val[Double]
val maxSize = Val[Double]

//scenar param
val seed = Val[Long]
val ahp0 = Val[Double]
val ahp1 = Val[Double]
val ahp2 = Val[Double]
val ahp3 = Val[Double]
val ahp4 = Val[Double]
val ahp5 = Val[Double]
val ahp6 = Val[Double]
val ahp7 = Val[Double]
val ahp8 = Val[Double]
val mean = Val[Boolean]
val strict = Val[Boolean]
val nMax = Val[Int]


val dirs = Val[Array[File]]

System.setProperty("java.awt.headless", "true")
System.setProperty("java.awt.toolkit", "sun.awt.HToolkit")

val sourceDirectories = ListDirectoriesSource(workDirectory / "dataOpenMole" / "stabilite", dirs, "(?!stabilite).*")

val exploProject = ExplorationTask(
								(xshift in (-1.0 to 1.0 by 1.0))x
								(yshift in (-1.0 to 1.0 by 1.0))x
								(folderIn in dirs withName inputName)x
								(minSize in (15.0 to 25.0 by 1.0))x
								(seuilDensBuild in seuilRange)
								)

val ProjectCreationTask = ScalaTask("""
|import fr.ign.task._
|val projectFile = withThreadClassLoader(classLoader(mupcityplugin.ProjectCreationDecompTask))(mupcityplugin.ProjectCreationDecompTask.apply(name, folderIn, newDir(), xmin, ymin, width, height, xshift, yshift,maxSize,minSize,seuilDensBuild)) 
|val nameProject = ProjectCreationDecompTask.getName()""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.ProjectCreationDecompTask),  
  name := "DataSens",
  xmin := 915948.0,
  ymin := 6677337.0,
    //vraies valeurs
  //width := 26590,
  //height := 26590,
  width := 2000,
  height := 2000,
  maxSize :=43740,
  inputs += (name, inputName, folderIn, xmin, ymin, width, height, xshift, yshift, minSize, maxSize, seuilDensBuild),
  outputs += (projectFile, nameProject, strict,mean, nMax, folderIn, name)
)

val exploScenario = ExplorationTask(
    (nMax in (5 to 6 by 1)) x 	
		(mean in List(true)) x
		(strict in List(true)))set (
	  ahp0 := 0.111,
    ahp1 := 0.111,
    ahp2 := 0.111,
    ahp3 := 0.111,
    ahp4 := 0.111,
    ahp5 := 0.111,
    ahp6 := 0.111,
    ahp7 := 0.111,
    ahp8 := 0.111,
    seed := 42L,
    (inputs,outputs) += (projectFile, name, nameProject, folderIn),
	  (inputs,outputs) += (ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8,seed)
)

val SimuTask = ScalaTask("""
|import fr.ign.task._
|val simulFile = withThreadClassLoader(classLoader(mupcityplugin.SimulTask))(mupcityplugin.SimulTask.apply(projectFile, nameProject, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed))
|val nameTotal = SimulTask.getTotalName()
|val simulName = SimulTask.getProjectName()""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.SimulTask),
  inputs += (projectFile, name, nameProject, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed, folderIn),
  outputs += (simulFile, folderIn, name)
)

val aggregateTask = ScalaTask("val (arraySimulFile, arrayFolderIn, arrayName) = (input.simulFile, input.folderIn, input.name)") set (
  inputs += (simulFile.toArray, folderIn.toArray, name.toArray),
  outputs += (arraySimulFile, arrayFolderIn, arrayName)
)

val ResultTask = ScalaTask("""
|import fr.ign.task._
|val name = input.name.head
|val tmpDir = mkDir()
|val resultFile=withThreadClassLoader(classLoader(mupcityplugin.StabAnalysisTask))(mupcityplugin.StabAnalysisTask.apply(input.simulFile, input.folderIn, tmpDir, input.name))""".stripMargin) set (
  plugins += pluginsOf(mupcityplugin.StabAnalysisTask),
  inputs += (simulFile.toArray, folderIn.toArray, name.toArray),
  outputs += (resultFile, name)
)

val h = ToStringHook(nameProject)
val copyProjectHook =  CopyFileHook(projectFile, resultFolder / "${name}-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}")
val copySimProjectHook =  CopyFileHook(simulFile, resultFolder / "${name}-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}" / "${simulName}")
val copyVracHook =  CopyFileHook(simulFile, resultFolder / "ScenarVrac")
val copyHook =  CopyFileHook(resultFile, resultFolder / "analyse_${name}")

//val env = EGIEnvironment(  "vo.complex-systems.eu",openMOLEMemory = 2048 megabytes)

val localEnv = LocalEnvironment(4)

(exploProject source sourceDirectories) -< ((ProjectCreationTask on localEnv hook ToStringHook(inputName)) -- ((exploScenario) -< (SimuTask on localEnv by 2) >- (ResultTask on localEnv hook copyHook)))
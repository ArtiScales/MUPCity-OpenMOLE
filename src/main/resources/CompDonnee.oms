//names
val name = Val[String]
val nameProject = Val[String]
val nameTotal = Val[String]
val simulName = Val[String]
val inputName = Val[String]
val arraySimulFile = Val[Array[File]]
val arrayFolderIn = Val[Array[File]]
val arrayName = Val[Array[String]]

//files & folders
val folderIn = Val[File]
val folderOut = Val[File]
val projectFile = Val[File]
val simulFile = Val[File]
val resultFile = Val[File]
val resultFolder = workDirectory / "results"

val machineReadable = Val[Boolean]

//project param

val xmin = Val[Double]
val ymin = Val[Double]
val width = Val[Double]
val height = Val[Double]
val xshift = Val[Double]
val yshift = Val[Double]

//decomp param
val seuilDensBuild=Val[Double]
val minSize = Val[Double]
val maxSize = Val[Double]

//scenar param
val seed = Val[Long]
val ahp0 = Val[Double]
val ahp1 = Val[Double]
val ahp2 = Val[Double]
val ahp3 = Val[Double]
val ahp4 = Val[Double]
val ahp5 = Val[Double]
val ahp6 = Val[Double]
val ahp7 = Val[Double]
val ahp8 = Val[Double]
val mean = Val[Boolean]
val strict = Val[Boolean]
val nMax = Val[Int]

System.setProperty("java.awt.headless", "true")
System.setProperty("java.awt.toolkit", "sun.awt.HToolkit")

val dirs = Val[Array[File]]

val sourceDirectories = ListDirectoriesSource(workDirectory / "compDonnee", dirs, "(^BatiAutom|^Manuel)")

val exploProject = ExplorationTask(folderIn in dirs withName inputName)

val ProjectCreationTask = ScalaTask("""
|import fr.ign.task._
|println("creating project for " + inputName)
|val projectFile = withThreadClassLoader(classLoader(mupcityplugin.ProjectCreationDecompTask))(mupcityplugin.ProjectCreationDecompTask.apply(name,folderIn,newDir(),xmin,ymin,width,height,xshift,yshift,maxSize,minSize,seuilDensBuild))
|val nameProject = ProjectCreationDecompTask.getName()""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.ProjectCreationDecompTask),
  name := "CompDonneeLight",
  xmin := 915948.0,
  ymin := 6677337.0,
  width := 500,
  height := 500,
  //width := 26590,
  //height := 26590,
  xshift := 0.0,
  yshift := 0.0,
  minSize := 20.0,
  maxSize := 500.0,
 // maxSize :=14580.0,
  seuilDensBuild := 0.0,
  inputs += (name, inputName, folderIn,xmin, ymin, width, height, xshift, yshift, minSize, maxSize, seuilDensBuild),
  outputs += (projectFile, name, nameProject, folderIn, inputName, folderIn,xmin, ymin, width, height, xshift, yshift, minSize, maxSize, seuilDensBuild)
)

val exploScenario = ExplorationTask(
	(nMax in (5 to 6 by 1)) x
	(strict in List(true,false))) set (
  ahp0 := 0.111,
  ahp1 := 0.111,
  ahp2 := 0.111,
  ahp3 := 0.111,
  ahp4 := 0.111,
  ahp5 := 0.111,
  ahp6 := 0.111,
  ahp7 := 0.111,
  ahp8 := 0.111,
  seed := 42L,
  machineReadable := true,
  mean :=true,
	  (inputs,outputs) += (projectFile, name, nameProject, folderIn, seed,mean, inputName, folderIn,xmin, ymin, width, height, xshift, yshift, minSize, maxSize, seuilDensBuild),
	  (inputs,outputs) += (ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8)
	)

val SimuTask = ScalaTask("""
|import fr.ign.task._
|val simulFile = withThreadClassLoader(classLoader(mupcityplugin.SimulTask))(mupcityplugin.SimulTask.apply(projectFile, nameProject, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed))""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.SimulTask),
  inputs += (projectFile, name, nameProject, nMax, strict, mean, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, seed, folderIn, inputName, folderIn,xmin, ymin, width, height, xshift, yshift, minSize, maxSize, seuilDensBuild),
  outputs += (simulFile, folderIn, name, inputName,nMax, strict, mean,seed, folderIn,xmin, ymin, width, height, xshift, yshift, minSize, maxSize, seuilDensBuild)
)

val aggregateTask = ScalaTask("val (arraySimulFile, arrayFolderIn, arrayName) = (input.simulFile, input.folderIn, input.name)") set (
  inputs += (simulFile.toArray, folderIn.toArray, name.toArray),
  outputs += (arraySimulFile, arrayFolderIn, arrayName)
)

val ResultTask = ScalaTask("""
|import fr.ign.task._
|val name = arrayName.flatten.head
|println(name + input.arraySimulFile.length)
|input.arraySimulFile.foreach{println}
|val tmpDir = mkDir()
|val resultFile=withThreadClassLoader(classLoader(mupcityplugin.CompDonneeAnalysisTask))(mupcityplugin.CompDonneeAnalysisTask.apply(input.arraySimulFile.flatten, input.arrayFolderIn.flatten, tmpDir, input.arrayName.flatten))""".stripMargin) set (
  plugins += pluginsOf(mupcityplugin.CompDonneeAnalysisTask),
  inputs += (arraySimulFile.toArray, arrayFolderIn.toArray, arrayName.toArray),
  outputs += (resultFile, name)
)

val h = ToStringHook(nameProject)
val copyProjectHook =  CopyFileHook(projectFile, resultFolder / "${name}-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}")
val copySimProjectHook =  CopyFileHook(simulFile, resultFolder / "${name}-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}--${nMax}_${strict}_${mean}_${seed} " )
val copyHook =  CopyFileHook(resultFile, resultFolder / "result_${name}")

//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2048 megabytes)
val env = LocalEnvironment(4)

(exploProject source sourceDirectories)  -< ((ProjectCreationTask on env hook ToStringHook(inputName)) -- ((exploScenario) -< (SimuTask on env hook copySimProjectHook) >-  aggregateTask)) >- (ResultTask on env hook copyHook)
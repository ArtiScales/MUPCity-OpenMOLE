val name = Val[String]
val nameProject = Val[String]
val nameTotal = Val[String]
val simulName = Val[String]
val folderIn = Val[File]
val inputName = Val[String]
val dirs = Val[Array[File]]
val sourceDirs = ListDirectoriesSource(workDirectory / "data" / "stabilite", dirs, "dataManuRien")
val folderOut = Val[File]
val projectFile = Val[File]
val simulFile = Val[File]
val resultFile = Val[File]
val resultFolder = workDirectory / "results"

val rangeSeed = (UniformDistribution[Long]() take 10)

//project param
val seed = Val[Long]
val xmin = Val[Double]
val ymin = Val[Double]
val width = Val[Double]
val height = Val[Double]
val xshift = Val[Double]
val yshift = Val[Double]

//decomp param
val seuilDensBuild=Val[Double]
val minSize = Val[Double]
val maxSize = Val[Double]

//scenar param
val ahp0 = Val[Double]
val ahp1 = Val[Double]
val ahp2 = Val[Double]
val ahp3 = Val[Double]
val ahp4 = Val[Double]
val ahp5 = Val[Double]
val ahp6 = Val[Double]
val ahp7 = Val[Double]
val ahp8 = Val[Double]
val mean = Val[Boolean]
val strict = Val[Boolean]
val nMax = Val[Int]

val exploStab = ExplorationTask(
  (seed in rangeSeed) x 
	(nMax in (3 to 7 by 1)) x 	
	(mean in List(true,false)) x
	(strict in List(true,false)) x
	(folderIn in dirs withName inputName))

val ProjectCreationTask = ScalaTask("""
|import fr.ign.task._
|val projectFile = withThreadClassLoader(classLoader(mupcityplugin.ProjectCreationDecompTask))(mupcityplugin.ProjectCreationDecompTask.apply(name,folderIn,newDir(),xmin,ymin,width,height,xshift,yshift,maxSize,minSize,seuilDensBuild))
|val nameProject = ProjectCreationDecompTask.getName()""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.ProjectCreationDecompTask),
  name := "Stability",
  xmin := 915948.0,
  ymin := 6677337.0,
  width := 26590,
  height := 26590,
  xshift := 0.0,
  yshift := 0.0,
  minSize :=20,
  maxSize :=1620,
  seuilDensBuild :=0,
  seed := 42L,
  inputs += (name, inputName, folderIn, xmin, ymin, width, height, xshift, yshift, seed, strict, mean, nMax, minSize, maxSize, seuilDensBuild),
  outputs += (projectFile, inputName, nameProject, seed, strict, mean, nMax, folderIn, minSize, seuilDensBuild, xmin, ymin)
)
val SimuTask = ScalaTask("""
|import fr.ign.task._
|val simulFile = withThreadClassLoader(classLoader(mupcityplugin.SimulTask))(mupcityplugin.SimulTask.apply(projectFile, nameProject, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed))
|val nameTotal = SimulTask.getTotalName()
|val simulName = SimulTask.getProjectName()""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.SimulTask),
  ahp0 := 0.111,
  ahp1 := 0.111,
  ahp2 := 0.111,
  ahp3 := 0.111,
  ahp4 := 0.111,
  ahp5 := 0.111,
  ahp6 := 0.111,
  ahp7 := 0.111,
  ahp8 := 0.111,
  inputs += (projectFile, inputName, nameProject, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed, folderIn, minSize, seuilDensBuild, xmin, ymin),
  outputs += (simulFile, inputName, nameTotal, simulName, minSize, seuilDensBuild, xmin, ymin)
)

val ResultTask = ScalaTask("""
|import fracgisplugin._
|val resultFile = withThreadClassLoader(classLoader(AnalysisTask))(AnalysisTask.apply(input.projectFile, folderIn(0), newDir(), "Stability"))""".stripMargin
) set (
  plugins += pluginsOf(fracgisplugin.AnalysisTask),
  inputs += (projectFile.toArray, folderIn.toArray),
  outputs += (resultFile)
)

val h = ToStringHook(nameProject)
val copyProjectHook =  CopyFileHook(projectFile, resultFolder / "Stability-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}")
val copySimProjectHook =  CopyFileHook(simulFile, resultFolder / "Stability-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}" / "${simulName}")
val copyHook =  CopyFileHook(resultFile, resultFolder / "analyse_Stability")

val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2048 megabytes)
//val env = LocalEnvironment(4)

(exploStab source sourceDirs) -< (ProjectCreationTask on env hook copyProjectHook hook h) -- (SimuTask on env hook copySimProjectHook)
// >- (ResultTask on env hook copyHook)

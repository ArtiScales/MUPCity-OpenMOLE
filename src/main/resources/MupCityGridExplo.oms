val name = Val[String]
val nameProjet = Val[String]
val nameTotal = Val[String]
val folderIn = Val[File]
//val dataFiles = ListDirectoriesSource(workDirectory / "data")
val folderOut = Val[File]
val projectFile = Val[File]
val resultFile = Val[File]
val resultFolder = workDirectory / "results"
val seed = 42L 

//project param
val xmin = Val[Double]
val ymin = Val[Double]


val width = Val[Double]
val height = Val[Double]
val xshift = Val[Double]
val xRange:List[Double] = List()
val yshift = Val[Double]

//decomp param
val seuilDensBuild=Val[Double]
val seuilRange: List[Double] = List(0.00001,0.0001,0.001,0.01)
val minSize = Val[Double]
val maxSize = Val[Double]

//scenar param
val ahp0 = Val[Double]
val ahp1 = Val[Double]
val ahp2 = Val[Double]
val ahp3 = Val[Double]
val ahp4 = Val[Double]
val ahp5 = Val[Double]
val ahp6 = Val[Double]
val ahp7 = Val[Double]
val ahp8 = Val[Double]
val mean = Val[Boolean]
val strict = Val[Boolean]
val nMax = Val[Int]

val exploStab = ExplorationTask((nMax in (5 to 6 by 1)) x 	
								(mean in List(true,false)) x
								(strict in List(true,false)) x
								(xmin in (915768.0 to 916128.0 by 20)x
								(ymin in (6677157.0 to 6677517.0 by 20)x
								(minSize in (15 to 25 by 1)x
								(seuilDensBuild in seuilRange)
								)

val ProjectCreationTask = ScalaTask("val projectFile = fr.ign.task.ProjectCreationTask.run(name, folderIn, newDir(), xmin, ymin, width, height, xshift, yshift,maxSize,minSize,seuilDensBuild);val nameProjet = fr.ign.task.ProjectCreationTask.getName();") set (
  libraries += workDirectory / "mupcity-openMole-0.0.1-SNAPSHOT-shaded.jar",
  name := "Stability",
  xmin := 915948.0,
  ymin := 6677337.0,
  //vraies valeurs 
  //width := 26590,
  //height := 26590,
  width := 2000,
  height := 2000,
  xshift := 0.0,
  yshift := 0.0,
  minSize :=810,
  maxSize :=1620,
  seuilDensBuild :=0,
  inputs += (name, folderIn, xmin, ymin, width, height, xshift, yshift, seed, strict,mean, nMax, folderIn,minSize,maxSize,seuilDensBuild),
  outputs += (projectFile, nameProjet, seed, strict,mean, nMax, folderIn)
)

val SimuTask = ScalaTask("fr.ign.task.SimulTask.run(projectFile, nameProjet, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed);val nameTotal = fr.ign.task.SimulTask.getName();") set (
  libraries += workDirectory / "mupcity-openMole-0.0.1-SNAPSHOT-shaded.jar",
  ahp0 := 0.111,
  ahp1 := 0.111,
  ahp2 := 0.111,
  ahp3 := 0.111,
  ahp4 := 0.111,
  ahp5 := 0.111,
  ahp6 := 0.111,
  ahp7 := 0.111,
  ahp8 := 0.111,
  inputs += (projectFile, nameProjet, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed, folderIn),
  outputs += (projectFile, nameTotal,folderIn,nameProjet)
)

val ResultTask = ScalaTask("val resultFile = fr.ign.task.RasterAnalyseTask.runStab(projectFile, folderIn, nameTotal);") set (
  libraries += workDirectory / "mupcity-openMole-0.0.1-SNAPSHOT-shaded.jar",
  inputs += (projectFile, folderIn, nameTotal),
  outputs += (resultFile, projectFile)
)

val copyHook =  CopyFileHook(resultFile, resultFolder / "${projectFile}")

//val env = EGIEnvironment(  "vo.complex-systems.eu",openMOLEMemory = 2048 megabytes)

val env = LocalEnvironment(4)

exploStab -< (ProjectCreationTask  on env) -- (DecompTask on env)-- (SimuTask on env)-- (ResultTask on env hook copyHook)
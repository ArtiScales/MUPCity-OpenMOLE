//names
val name = Val[String]
val nameProject = Val[String]
val nameTotal = Val[String]
val simulName = Val[String]
val inputName = Val[String]

//files & folders
val folderIn = Val[File]
val folderOut = Val[File]
val projectFile = Val[File]
val simulFile = Val[File]
val resultFile = Val[File]
val resultFolder = workDirectory / "results"


//project param
val xmin = Val[Double]
val ymin = Val[Double]
val width = Val[Double]
val height = Val[Double]
val xshift = Val[Double]
val yshift = Val[Double]
val xRange:List[Double] = List(915768,915888,915928,915948,915968,916008,916128) //pa beau et devrais d√©pendre de la taille de la cellue min, mais impossible de faire passer une varaible dans le pas des explorations? 
val yRange:List[Double] = List(6677157,6677277,6677317,6677337,6677357,6677397,6677517)


//decomp param
val seuilDensBuild=Val[Double]
val seuilRange: List[Double] = List(0,0.00001,0.0001,0.001,0.01)
val minSize = Val[Double]
val maxSize = Val[Double]

//scenar param
val seed = Val[Long]
val ahp0 = Val[Double]
val ahp1 = Val[Double]
val ahp2 = Val[Double]
val ahp3 = Val[Double]
val ahp4 = Val[Double]
val ahp5 = Val[Double]
val ahp6 = Val[Double]
val ahp7 = Val[Double]
val ahp8 = Val[Double]
val mean = Val[Boolean]
val strict = Val[Boolean]
val nMax = Val[Int]
/*
val exploStab = ExplorationTask((nMax in (5 to 6 by 1)) x 	
								(mean in List(true,false)) x
								(strict in List(true,false)) x
								(xmin in xRange)x
								(ymin in yRange)x
								(minSize in (15.0 to 25.0 by 1.0))x
								(seuilDensBuild in seuilRange)x
								(folderIn in (workDirectory / "data") withName inputName))
								
*/

val exploStab = ExplorationTask((nMax in (5 to 6 by 1)) x 	
								(mean in List(true)) x
								(strict in List(true)) x
								(minSize in (15.0 to 15.0 by 1.0))x
								(xmin in (915768.0 to 915788.0 by 15))x
								(ymin in (6677157.0 to 6677157.0 by 15))x
								(seuilDensBuild in List(0,0.00001))x
								(folderIn in (workDirectory / "data") withName inputName))

val ProjectCreationTask = ScalaTask("""
|import fr.ign.task._
|val projectFile = withThreadClassLoader(classLoader(mupcityplugin.ProjectCreationDecompTask))(mupcityplugin.ProjectCreationDecompTask.apply(name,folderIn,newDir(),xmin,ymin,width,height,xshift,yshift,maxSize,minSize,seuilDensBuild))
|val nameProject = ProjectCreationDecompTask.getName()""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.ProjectCreationDecompTask),
  name := "GridExplo",
  //vraies valeurs 
  //width := 26590,
  //height := 26590,
  width := 2000,
  height := 2000,
  xshift := 0.0,
  yshift := 0.0,
  maxSize :=43740,
  inputs += (name, name,inputName, folderIn, xmin, ymin, width, height, xshift, yshift, strict, mean, nMax, minSize, maxSize, seuilDensBuild),
  outputs += (projectFile, name,inputName, nameProject, strict, mean, nMax, folderIn, minSize, seuilDensBuild, xmin, ymin)
)

val SimuTask = ScalaTask("""
|import fr.ign.task._
|val simulFile = withThreadClassLoader(classLoader(mupcityplugin.SimulTask))(mupcityplugin.SimulTask.apply(projectFile, nameProject, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed))
|val nameTotal = SimulTask.getTotalName()
|val simulName = SimulTask.getProjectName()""".stripMargin
) set (
  plugins += pluginsOf(mupcityplugin.SimulTask),
  ahp0 := 0.111,
  ahp1 := 0.111,
  ahp2 := 0.111,
  ahp3 := 0.111,
  ahp4 := 0.111,
  ahp5 := 0.111,
  ahp6 := 0.111,
  ahp7 := 0.111,
  ahp8 := 0.111,
  seed := 42L,
  inputs += (projectFile, name, inputName, nameProject, nMax, strict, ahp0, ahp1, ahp2, ahp3, ahp4, ahp5, ahp6, ahp7, ahp8, mean, seed, folderIn, minSize, seuilDensBuild, xmin, ymin),
  outputs += (simulFile, name, inputName, nameTotal, simulName, minSize, seuilDensBuild, xmin, ymin, seed)
)


val h = ToStringHook(nameProject)
val copyProjectHook =  CopyFileHook(projectFile, resultFolder / "${name}-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}")
val copySimProjectHook =  CopyFileHook(simulFile, resultFolder / "${name}-${inputName}-CM${minSize}-S${seuilDensBuild}-GP_${xmin}_${ymin}" / "${simulName}")
val copyHook =  CopyFileHook(resultFile, resultFolder / "analyse_Stability")

//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2048 megabytes)
val env = LocalEnvironment(1)

exploStab  -< (ProjectCreationTask on env hook copyProjectHook hook h) -- (SimuTask on env hook copySimProjectHook)